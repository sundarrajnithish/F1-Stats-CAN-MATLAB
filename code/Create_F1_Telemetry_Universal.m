% Create_F1_Telemetry_Universal.m
% This script creates a Simulink model for F1 telemetry visualization that works
% with multiple CAN interfaces and is compatible with various MATLAB versions

% Close any open system
close_system('F1_Telemetry_Universal', 0);

try
    % Create a new Simulink model
    sys = 'F1_Telemetry_Universal';
    new_system(sys);
    open_system(sys);
    
    % Set model parameters for compatibility across MATLAB versions
    set_param(sys, 'SaveFormat', 'Structure');
    set_param(sys, 'SolverType', 'Fixed-step');
    set_param(sys, 'Solver', 'FixedStepDiscrete');
    set_param(sys, 'FixedStep', '0.1');
    set_param(sys, 'StopTime', 'inf');

    % Determine which toolboxes are available
    has_vnt = license('test', 'Vehicle_Network_Toolbox');
    has_vector = false;
    has_slcan = false;
    
    try
        if has_vnt
            % Check for specific blocks
            has_vector = exist('vnt3/CAN Receive', 'file') == 4;
            has_slcan = exist('slcan/CAN Receive', 'file') == 4;
        end
    catch
        % Continue if checks fail
    end
    
    % Create a subsystem to encapsulate CAN receive functionality
    add_block('simulink/Ports & Subsystems/Subsystem', [sys '/CAN_Interface'], ...
        'Position', [100, 100, 250, 200]);
    
    % Delete the default In1/Out1 ports in the subsystem
    delete_line([sys '/CAN_Interface'], 'In1/1', 'Out1/1');
    delete_block([sys '/CAN_Interface/In1']);
    delete_block([sys '/CAN_Interface/Out1']);
    
    % Add outport for CAN data
    add_block('simulink/Ports & Subsystems/Outport', [sys '/CAN_Interface/CAN_Data'], ...
        'Position', [500, 100, 530, 120]);
    
    % Add S-Function or MATLAB Function block for universal CAN interface
    if has_vector || has_slcan
        % Use Vehicle Network Toolbox if available
        if has_vector
            add_block('vnt3/CAN Receive', [sys '/CAN_Interface/CAN_Receive'], ...
                'Position', [100, 100, 200, 150], ...
                'ChannelName', 'Vector Virtual 1', ...
                'SampleTime', '0.01');
            
            % Add Bus Selector to extract Data
            add_block('simulink/Signal Routing/Bus Selector', [sys '/CAN_Interface/Bus_Selector'], ...
                'Position', [250, 100, 350, 150]);
            set_param([sys '/CAN_Interface/Bus_Selector'], 'OutputSignals', 'Data');
            
            % Connect blocks
            add_line([sys '/CAN_Interface'], 'CAN_Receive/1', 'Bus_Selector/1');
            add_line([sys '/CAN_Interface'], 'Bus_Selector/1', 'CAN_Data/1');
            
        elseif has_slcan
            add_block('slcan/CAN Receive', [sys '/CAN_Interface/CAN_Receive'], ...
                'Position', [100, 100, 200, 150], ...
                'CANChannel', '1', ...
                'SampleTime', '0.01');
            
            % Add Bus Selector to extract Data
            add_block('simulink/Signal Routing/Bus Selector', [sys '/CAN_Interface/Bus_Selector'], ...
                'Position', [250, 100, 350, 150]);
            set_param([sys '/CAN_Interface/Bus_Selector'], 'OutputSignals', 'Data');
            
            % Connect blocks
            add_line([sys '/CAN_Interface'], 'CAN_Receive/1', 'Bus_Selector/1');
            add_line([sys '/CAN_Interface'], 'Bus_Selector/1', 'CAN_Data/1');
        end
    else
        % Use MATLAB Function block as fallback with direct MATLAB code
        add_block('simulink/User-Defined Functions/MATLAB Function', [sys '/CAN_Interface/CAN_Function'], ...
            'Position', [200, 100, 400, 150]);
        
        % Write function to simulate or read CAN data
        function_code = [
            'function CAN_Data = fcn()\n' ...
            '% This function reads CAN data or provides simulated data\n' ...
            'persistent ch lastTime;\n\n' ...
            'if isempty(ch) || isempty(lastTime)\n' ...
            '    try\n' ...
            '        % Try to create CAN channel\n' ...
            '        ch = canChannel(''Vector'', ''Virtual 1'', 2);\n' ...
            '        configBusSpeed(ch, 500000);\n' ...
            '        start(ch);\n' ...
            '    catch\n' ...
            '        % If failed, set ch to empty for simulation mode\n' ...
            '        ch = [];\n' ...
            '        disp(''CAN hardware not available, using simulation mode'');\n' ...
            '    end\n' ...
            '    lastTime = tic;\n' ...
            'end\n\n' ...
            'if ~isempty(ch) && ch.MessagesAvailable > 0\n' ...
            '    % Get real CAN data\n' ...
            '    msg = receive(ch, 1);\n' ...
            '    CAN_Data = msg.Data;\n' ...
            '    lastTime = tic;\n' ...
            'else\n' ...
            '    % Generate simulated data\n' ...
            '    elapsed = toc(lastTime);\n' ...
            '    t = mod(elapsed, 10);  % Cycle every 10 seconds\n' ...
            '    \n' ...
            '    % Generate realistic-looking F1 telemetry data\n' ...
            '    speed = uint8(max(0, min(255, 100 + 80 * sin(t*pi/5))));\n' ...
            '    throttle = uint8(max(0, min(100, 50 + 50 * sin(t*pi/2.5))));\n' ...
            '    brake = uint8(max(0, min(100, 50 - 50 * sin(t*pi/2.5))));\n' ...
            '    \n' ...
            '    % RPM split into high and low bytes (spans 0 to ~15000)\n' ...
            '    rpm_value = max(0, min(15000, 8000 + 4000 * sin(t*pi/3)));\n' ...
            '    rpm_high = uint8(bitshift(uint16(rpm_value), -8));\n' ...
            '    rpm_low = uint8(bitand(uint16(rpm_value), 255));\n' ...
            '    \n' ...
            '    % Create simulated CAN data packet\n' ...
            '    CAN_Data = [speed; throttle; brake; uint8(0); rpm_high; rpm_low; uint8(0); uint8(0)];\n' ...
            'end\n'
        ];
        
        set_param([sys '/CAN_Interface/CAN_Function'], 'FunctionName', 'canReceiver', 'FunctionBody', function_code);
        add_line([sys '/CAN_Interface'], 'CAN_Function/1', 'CAN_Data/1');
    end

    % Add a Demux block in the main model to separate data bytes
    add_block('simulink/Signal Routing/Demux', [sys '/Demux'], ...
        'Position', [300, 140, 350, 190], ...
        'Outputs', '8');  % CAN message can have up to 8 bytes
    
    % Connect Subsystem to Demux
    add_line(sys, 'CAN_Interface/1', 'Demux/1');
    
    % Add Data Type Conversion blocks for each parameter
    % Speed (Byte 1)
    add_block('simulink/Signal Attributes/Data Type Conversion', [sys '/Speed_Conv'], ...
        'Position', [400, 50, 500, 70], ...
        'OutDataTypeStr', 'double');
    add_line(sys, 'Demux/1', 'Speed_Conv/1');
    
    % Throttle (Byte 2)
    add_block('simulink/Signal Attributes/Data Type Conversion', [sys '/Throttle_Conv'], ...
        'Position', [400, 100, 500, 120], ...
        'OutDataTypeStr', 'double');
    add_line(sys, 'Demux/2', 'Throttle_Conv/1');
    
    % Brake (Byte 3)
    add_block('simulink/Signal Attributes/Data Type Conversion', [sys '/Brake_Conv'], ...
        'Position', [400, 150, 500, 170], ...
        'OutDataTypeStr', 'double');
    add_line(sys, 'Demux/3', 'Brake_Conv/1');
    
    % RPM calculation (Bytes 5 and 6)
    % Byte 5
    add_block('simulink/Signal Attributes/Data Type Conversion', [sys '/RPM_High_Conv'], ...
        'Position', [400, 200, 500, 220], ...
        'OutDataTypeStr', 'double');
    add_line(sys, 'Demux/5', 'RPM_High_Conv/1');
    
    % Byte 6
    add_block('simulink/Signal Attributes/Data Type Conversion', [sys '/RPM_Low_Conv'], ...
        'Position', [400, 250, 500, 270], ...
        'OutDataTypeStr', 'double');
    add_line(sys, 'Demux/6', 'RPM_Low_Conv/1');
    
    % Shift operation for RPM high byte
    add_block('simulink/Math Operations/Math Function', [sys '/Shift_Left'], ...
        'Position', [550, 200, 600, 220], ...
        'Operator', 'pow');
    add_block('simulink/Sources/Constant', [sys '/Shift_Value'], ...
        'Position', [500, 230, 530, 250], ...
        'Value', '256');
    add_line(sys, 'RPM_High_Conv/1', 'Shift_Left/1');
    add_line(sys, 'Shift_Value/1', 'Shift_Left/2');
    
    % Add blocks to combine RPM bytes
    add_block('simulink/Math Operations/Add', [sys '/RPM_Combine'], ...
        'Position', [650, 220, 700, 240]);
    add_line(sys, 'Shift_Left/1', 'RPM_Combine/1');
    add_line(sys, 'RPM_Low_Conv/1', 'RPM_Combine/2');
    
    % Create a subsystem for the dashboard display
    add_block('simulink/Ports & Subsystems/Subsystem', [sys '/Dashboard'], ...
        'Position', [800, 100, 950, 200]);
    
    % Delete the default In1/Out1 ports in the dashboard subsystem
    delete_line([sys '/Dashboard'], 'In1/1', 'Out1/1');
    delete_block([sys '/Dashboard/Out1']);
    
    % Add input ports for the dashboard
    add_block('simulink/Ports & Subsystems/Inport', [sys '/Dashboard/Speed'], ...
        'Position', [100, 100, 130, 120], 'Port', '1');
    add_block('simulink/Ports & Subsystems/Inport', [sys '/Dashboard/Throttle'], ...
        'Position', [100, 150, 130, 170], 'Port', '2');
    add_block('simulink/Ports & Subsystems/Inport', [sys '/Dashboard/Brake'], ...
        'Position', [100, 200, 130, 220], 'Port', '3');
    add_block('simulink/Ports & Subsystems/Inport', [sys '/Dashboard/RPM'], ...
        'Position', [100, 250, 130, 270], 'Port', '4');
    
    % Add gauges/displays inside the dashboard
    add_block('simulink/Sinks/Display', [sys '/Dashboard/Speed_Display'], ...
        'Position', [300, 100, 370, 130], 'Format', 'short');
    add_block('simulink/Sinks/Display', [sys '/Dashboard/Throttle_Display'], ...
        'Position', [300, 150, 370, 180], 'Format', 'short');
    add_block('simulink/Sinks/Display', [sys '/Dashboard/Brake_Display'], ...
        'Position', [300, 200, 370, 230], 'Format', 'short');
    add_block('simulink/Sinks/Display', [sys '/Dashboard/RPM_Display'], ...
        'Position', [300, 250, 370, 280], 'Format', 'short');
    
    % Add scopes inside dashboard
    add_block('simulink/Sinks/Scope', [sys '/Dashboard/Speed_Scope'], ...
        'Position', [400, 100, 430, 130], 'BackgroundColor', 'blue');
    set_param([sys '/Dashboard/Speed_Scope'], 'YLimMode', 'on', 'YMin', '0', 'YMax', '350');
    
    add_block('simulink/Sinks/Scope', [sys '/Dashboard/Throttle_Scope'], ...
        'Position', [400, 150, 430, 180], 'BackgroundColor', 'green');
    set_param([sys '/Dashboard/Throttle_Scope'], 'YLimMode', 'on', 'YMin', '0', 'YMax', '100');
    
    add_block('simulink/Sinks/Scope', [sys '/Dashboard/Brake_Scope'], ...
        'Position', [400, 200, 430, 230], 'BackgroundColor', 'red');
    set_param([sys '/Dashboard/Brake_Scope'], 'YLimMode', 'on', 'YMin', '0', 'YMax', '100');
    
    add_block('simulink/Sinks/Scope', [sys '/Dashboard/RPM_Scope'], ...
        'Position', [400, 250, 430, 280], 'BackgroundColor', 'magenta');
    set_param([sys '/Dashboard/RPM_Scope'], 'YLimMode', 'on', 'YMin', '0', 'YMax', '15000');
    
    % Connect signals inside dashboard
    add_line([sys '/Dashboard'], 'Speed/1', 'Speed_Display/1');
    add_line([sys '/Dashboard'], 'Throttle/1', 'Throttle_Display/1');
    add_line([sys '/Dashboard'], 'Brake/1', 'Brake_Display/1');
    add_line([sys '/Dashboard'], 'RPM/1', 'RPM_Display/1');
    
    add_line([sys '/Dashboard'], 'Speed/1', 'Speed_Scope/1');
    add_line([sys '/Dashboard'], 'Throttle/1', 'Throttle_Scope/1');
    add_line([sys '/Dashboard'], 'Brake/1', 'Brake_Scope/1');
    add_line([sys '/Dashboard'], 'RPM/1', 'RPM_Scope/1');
    
    % Connect signals to the dashboard in the main model
    add_line(sys, 'Speed_Conv/1', 'Dashboard/1');
    add_line(sys, 'Throttle_Conv/1', 'Dashboard/2');
    add_line(sys, 'Brake_Conv/1', 'Dashboard/3');
    add_line(sys, 'RPM_Combine/1', 'Dashboard/4');
    
    % Add "To Workspace" blocks for logging
    add_block('simulink/Sinks/To Workspace', [sys '/Speed_Log'], ...
        'Position', [600, 50, 650, 70], ...
        'VariableName', 'speed_log', ...
        'SaveFormat', 'Timeseries');
    add_block('simulink/Sinks/To Workspace', [sys '/Throttle_Log'], ...
        'Position', [600, 100, 650, 120], ...
        'VariableName', 'throttle_log', ...
        'SaveFormat', 'Timeseries');
    add_block('simulink/Sinks/To Workspace', [sys '/Brake_Log'], ...
        'Position', [600, 150, 650, 170], ...
        'VariableName', 'brake_log', ...
        'SaveFormat', 'Timeseries');
    add_block('simulink/Sinks/To Workspace', [sys '/RPM_Log'], ...
        'Position', [750, 220, 800, 240], ...
        'VariableName', 'rpm_log', ...
        'SaveFormat', 'Timeseries');
    
    % Connect log blocks
    add_line(sys, 'Speed_Conv/1', 'Speed_Log/1');
    add_line(sys, 'Throttle_Conv/1', 'Throttle_Log/1');
    add_line(sys, 'Brake_Conv/1', 'Brake_Log/1');
    add_line(sys, 'RPM_Combine/1', 'RPM_Log/1');
    
    % Add annotations
    add_annotation(sys, 'text', [0.2, 0.05, 0.8, 0.1], 'String', 'F1 Telemetry Visualization - Universal Model');
    add_annotation(sys, 'text', [0.1, 0.9, 0.5, 0.95], 'String', 'Compatible with all MATLAB versions');
    
    % Save the model
    save_system(sys);
    disp('Universal Simulink model created successfully: F1_Telemetry_Universal.slx');
    disp('This model works with or without the Vehicle Network Toolbox.');
    
catch ME
    disp('Error creating universal Simulink model:');
    disp(ME.message);
end

% Instructions for users
disp(' ');
disp('===== INSTRUCTIONS =====');
disp('1. The model works in two modes:');
disp('   a) Hardware mode: Uses actual CAN hardware if available');
disp('   b) Simulation mode: Generates simulated F1 telemetry if no CAN hardware found');
disp('2. The dashboard displays Speed, Throttle, Brake and RPM values');
disp('3. Data is also logged to the MATLAB workspace');
disp('4. To save the logged data after simulation:');
disp('   >> save(''f1_telemetry_log.mat'', ''speed_log'', ''throttle_log'', ''brake_log'', ''rpm_log'');');
disp('======================');
